# 导入PyGame和其他必要的库
import pygame  # 导入PyGame，用于游戏开发
import random  # 用于生成随机方块类型

# 初始化PyGame并创建游戏窗口
pygame.init()  # 初始化PyGame模块

# 游戏区域与网格大小定义
CELL_SIZE = 20  # 每个小格子的边长（像素）
COLS = 10       # 网格列数
ROWS = 20       # 网格行数

# 计算游戏窗口大小
WIDTH = CELL_SIZE * COLS
HEIGHT = CELL_SIZE * ROWS

# 创建游戏窗口和设置窗口标题
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('俄罗斯方块')

# 定义方块类型及其形状数据结构（使用二维数组表示不同形状）
# 每个方块包含一组旋转形态，使用0和1组成的数组定义
SHAPES = {
    'I': [
        [
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0]
        ],
    ],
    'O': [
        [
            [1, 1],
            [1, 1]
        ]
    ],
    'T': [
        [
            [0, 1, 0],
            [1, 1, 1],
            [0, 0, 0]
        ],
        [
            [0, 1, 0],
            [0, 1, 1],
            [0, 1, 0]
        ],
        [
            [0, 0, 0],
            [1, 1, 1],
            [0, 1, 0]
        ],
        [
            [0, 1, 0],
            [1, 1, 0],
            [0, 1, 0]
        ]
    ],
    'S': [
        [
            [0, 1, 1],
            [1, 1, 0],
            [0, 0, 0]
        ],
        [
            [1, 0, 0],
            [1, 1, 0],
            [0, 1, 0]
        ]
    ],
    'Z': [
        [
            [1, 1, 0],
            [0, 1, 1],
            [0, 0, 0]
        ],
        [
            [0, 1, 0],
            [1, 1, 0],
            [1, 0, 0]
        ]
    ],
    'J': [
        [
            [1, 0, 0],
            [1, 1, 1],
            [0, 0, 0]
        ],
        [
            [0, 1, 1],
            [0, 1, 0],
            [0, 1, 0]
        ],
        [
            [0, 0, 0],
            [1, 1, 1],
            [0, 0, 1]
        ],
        [
            [0, 1, 0],
            [0, 1, 0],
            [1, 1, 0]
        ]
    ],
    'L': [
        [
            [0, 0, 1],
            [1, 1, 1],
            [0, 0, 0]
        ],
        [
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 1]
        ],
        [
            [0, 0, 0],
            [1, 1, 1],
            [1, 0, 0]
        ],
        [
            [1, 1, 0],
            [0, 1, 0],
            [0, 1, 0]
        ]
    ]
}

# ******************************************
# s-5: 为每种方块类型分配固定颜色
# ******************************************
# 为每个类型的方块分配唯一的颜色（RGB格式），用于字段颜色引用
SHAPE_COLORS = {
    'I': (0, 255, 255),   # 青色
    'O': (255, 255, 0),   # 黄色
    'T': (128, 0, 128),   # 紫色
    'S': (0, 255, 0),     # 绿色
    'Z': (255, 0, 0),     # 红色
    'J': (0, 0, 255),     # 蓝色
    'L': (255, 165, 0)    # 橙色
}
# 通过此设置，所有方块在游戏过程中颜色始终一致

# ******************************************
# s-6: 生成和初始化新方块
# ******************************************
class Tetromino:
    """
    表示一个俄罗斯方块（包括类型、旋转形态、坐标、颜色）
    """
    def __init__(self):
        # 随机选取一种方块类型
        self.kind = random.choice(list(SHAPES.keys()))
        self.shape_states = SHAPES[self.kind]      # 获取全部旋转状态
        self.rotation = 0                         # 初始旋转状态索引
        self.shape = self.shape_states[self.rotation]  # 当前形状
        self.color = SHAPE_COLORS[self.kind]      # 方块的固定颜色
        # 放置在顶部中央（注意shape可能有2或3或4列宽，需要居中）
        shape_width = len(self.shape[0])
        # 计算X初始位置：让方块横向居中
        self.x = (COLS - shape_width) // 2
        self.y = 0  # 顶部
    
    # （如需旋转、平移，稍后可补充方法）

# 示例：生成一个新的方块并输出其信息（用于调试，可删为正式游戏流程留接口）
if __name__ == "__main__":
    # 生成一个新方块
    tetromino = Tetromino()
    print("新方块类型:", tetromino.kind)
    print("方块颜色:", tetromino.color)
    print("初始坐标:", tetromino.x, tetromino.y)
    print("初始形状:")
    for row in tetromino.shape:
        print(row)
# 你现在已经为每种方块分配了固定颜色，并实现了新方块的生成与初始化。
# 后续可以用Tetromino对象管理游戏中的当前下落方块。